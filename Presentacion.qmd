---
title: "Predicción de fraude financiero"
subtitle: "Un análisis mediante modelos lineales generalizados"
format: 
  revealjs:
    theme: dark
    slide-number: true
    logo: Imgs/logounr.png
author: "Gamboa Nicolas - Roncaglia Andrés - Santini Franco"
echo: false
warning: false
message: false
---


```{r, include=FALSE}
library(ggplot2)
library(dplyr)
library(tidyr)
library(patchwork)
library(glmtoolbox)
library(statmod)
library(pROC)
library(ggforce)
library(caret)
library(ggdark)
library(kableExtra)

theme_set(ggdark::dark_theme_dark() + 
            theme(plot.title = element_text(hjust = 0.5),
                  legend.position = "bottom",
                  plot.background = element_rect(fill = "#191919"),
                  panel.background = element_rect(fill = "#191919"),
                  panel.grid.major = element_line(color = "black"),
                  panel.grid.minor = element_line(color = "black"),
                  legend.background = element_rect(fill = "grey8", colour = NA),
                  axis.text = element_text(color = "grey70", size = 10),
                  axis.title = element_text(color = "#bcc3c7", size = 13),
                  title = element_text(color = "#bcc3c7", size = 16),
                  legend.text = element_text(color = "#bcc3c7", size = 11),
                  legend.title = element_text(color = "#bcc3c7", size = 13)
                  ))

knitr::opts_chunk$set(fig.align = "center")

```


```{r}
data_og <- read.csv("Data/Base_resumida.csv") |> 
  mutate(
    income = factor(income),
    proposed_credit_limit_cat = case_when(proposed_credit_limit == 190 ~ 500,
                                          proposed_credit_limit == 200 ~ 500,
                                          proposed_credit_limit == 210 ~ 500,
                                          proposed_credit_limit == 490 ~ 500,
                                          proposed_credit_limit == 500 ~ 500,
                                          proposed_credit_limit == 510 ~ 500,
                                          proposed_credit_limit == 990 ~ 1000,
                                          proposed_credit_limit == 1000 ~ 1000,
                                          proposed_credit_limit == 1500 ~ 1500,
                                          proposed_credit_limit == 1900 ~ 2000,
                                          proposed_credit_limit == 2000 ~ 2000,
                                          T ~ 2000))

data_og <- data_og |> 
  mutate(
    fraud_bool = factor(fraud_bool),
    proposed_credit_limit_cat = factor(proposed_credit_limit_cat),
    has_other_cards = factor(has_other_cards),
    foreign_request = factor(foreign_request),
    phone_home_valid = factor(phone_home_valid),
    phone_mobile_valid = factor(phone_mobile_valid),
    email_is_free = factor(email_is_free),
    keep_alive_session = factor(keep_alive_session),
    current_address_months_count = case_when(current_address_months_count == -1 ~ NA,
                                              T ~ current_address_months_count),
    bank_months_count = case_when(bank_months_count == -1 ~ NA,
                                              T ~ bank_months_count),
    session_length_in_minutes = case_when(session_length_in_minutes == -1 ~ NA,
                                              T ~ session_length_in_minutes)
  ) |> 
  select(-prev_address_months_count,
         -zip_count_4w,
         -velocity_6h,
         -velocity_4w,
         -days_since_request,
         -intended_balcon_amount,
         -device_fraud_count,
         -bank_branch_count_8w,
         -date_of_birth_distinct_emails_4w)


# Creacion de muestra mas chica -----------------
set.seed(2024)

data_og <- drop_na(data = data_og)

fraude <- data_og |> filter(fraud_bool == 1)
fraude$n <- 1:nrow(fraude)

no_fraude <- data_og |> filter(fraud_bool == 0)
no_fraude$n <- 1:nrow(no_fraude)

proporcion <- sample(seq(0.1, 0.4, by = 0.05), size = 1)
n <- sample(400:700, size = 1)

sel_fraude <- sample(x = fraude$n, size = n*proporcion, replace = F)
sel_nofraude <- sample(x = no_fraude$n, size = n-(n*proporcion), replace = F)

fraude <- fraude[sel_fraude,]
no_fraude <- no_fraude[sel_nofraude,]

data <- rbind(fraude, no_fraude)
data <- data |> 
  mutate(income_ord = as.numeric(income),
         proposed_credit_limit_cat_ord = as.numeric(proposed_credit_limit_cat),
         income = income_ord/10,
         proposed_credit_limit = case_when(proposed_credit_limit_cat_ord == 1 ~ 500,
                                          proposed_credit_limit_cat_ord == 2 ~ 1000,
                                          proposed_credit_limit_cat_ord == 3 ~ 1500,
                                          T ~ 2000))

# Creacion datos de testeo -----------------

data_resto <- filter(data_og, !(X %in% data$X))

fraude <- data_resto |> filter(fraud_bool == 1)
fraude$n <- 1:nrow(fraude)

no_fraude <- data_resto |> filter(fraud_bool == 0)
no_fraude$n <- 1:nrow(no_fraude)

proporcion <- sample(seq(0.1, 0.4, by = 0.05), size = 1)
n <- floor(n*0.7)

sel_fraude <- sample(x = fraude$n, size = n*proporcion, replace = F)
sel_nofraude <- sample(x = no_fraude$n, size = n-(n*proporcion), replace = F)

fraude <- fraude[sel_fraude,]
no_fraude <- no_fraude[sel_nofraude,]

data_test <- rbind(fraude, no_fraude)


data_test <- data_test |> select(-n, -proposed_credit_limit, -X) |> 
  mutate(income_ord = as.numeric(income),
         proposed_credit_limit_cat_ord = as.numeric(proposed_credit_limit_cat),
         income = income_ord/10,
         proposed_credit_limit = case_when(proposed_credit_limit_cat_ord == 1 ~ 500,
                                          proposed_credit_limit_cat_ord == 2 ~ 1000,
                                          proposed_credit_limit_cat_ord == 3 ~ 1500,
                                          T ~ 2000),
         housing_status = case_when(housing_status %in% c("BD", "BE", "BF") ~ "Otro",
                               T ~ housing_status),
    
          device_os = case_when(device_os == "x11" ~ "other",
                          T ~ device_os),
          customer_age = factor(case_when(customer_age %in% c(10,20) ~ "<20",
                             customer_age %in% c(60,70) ~ ">60",
                             T ~ as.character(customer_age))))




# Saco variables inutiles
data <- data |> select(-n, -X)

```



## Motivación {.center}

El fraude con tarjetas de crédito es una de las principales amenazas que sufren los bancos. Ya que los métodos de fraude se han vuelto más sofisticados, generando pérdidas significativas a los bancos y afectando la confianza de los usuarios, resulta de gran importancia estudiar qué perfiles de clientes son los más propensos a cometer fraude. 

<!-- El fraude con tarjetas de crédito es una de las principales amenazas que sufren los bancos. Con el auge las transacciones digitales y los medios de pago electrónicos, se facilitaron los traspasos de dinero, pero junto con las ventajas también vinieron las consecuencias, y es que los métodos de fraude se han vuelto más sofisticados, generando pérdidas significativas a los bancos y afectando la confianza de los usuarios. Actividades como el uso no autorizado de tarjetas, la clonación de datos y transacciones fraudulentas requieren el desarrollo de tecnologías avanzadas para la detección temprana y la prevención. -->

## {.smaller}

### Variables más relevantes 

- `fraud_bool`: Indicadora de si la transacción fue fraude o no

- `income`: Ingreso anual en cuantiles

- `name_email_similarity`: Similitud del nombre en el email y el nombre del solicitante

- `customer_age`: Edad del cliente en décadas

- `days_since_request`: Días desde la solicitud

- `payment_type`: Tipo del plan de pago 

- `employment_status`: Estado de empleo del solicitante

- `credit_risk_score`: Score de riesgo de la aplicación

- `email_is_free`: Tipo del dominio del email del aplicante (email pago o gratis)

## {.smaller}

### Variables más relevantes 

- `housing_status`: Estado residencial del aplicante

- `phone_home_valid`: Validez del telefono fijo provisto

- `phone_mobile_valid`: Validez del telefono movil provisto

- `has_other_cards`: Indicadora de si la persona tiene otra tarjeta en el mismo banco

- `proposed_credit_limit`: Crédito limite propuesto por el aplicante

- `foreign_request`: Indicadora de si la solicitud fue hecha en el pais del banco

- `device_os`: Sistema operativo del dispositivo desde el que se hizo la solicitud

- `keep_alive_session`: Indicadora de si el solicitante decidió mantener la sesión iniciada al ingresar

- `device_distinct_emails_8w`: Número de emails distintos en la página del banco desde el mismo dispositivo usado en las últimas 8 semanas

## Análisis descriptivo {.center}

```{r}

dt1 <- data |> 
  group_by(fraud_bool) |> 
  summarise(n = n())


(data |> 
  ggplot() +
  aes(x = fraud_bool, y = (after_stat(count))/sum(after_stat(count)))+
  geom_bar(color = "grey70", fill = c("#4A5899", "#F2545B")) +
  xlab(label = "Fraude") +
  ylab(label = "Proporción") +
  scale_y_continuous(limits = c(0,1)) +
  scale_x_discrete(labels = c("0" = "No", "1" = "Sí")) +
  geom_text(aes(label = after_stat(count), 
                y = after_stat(count)/sum(after_stat(count)) + 0.02), 
            stat = "count", 
            size = 5,
            vjust = 0,
            color = "grey70")) +
  ((data |> 
  filter(fraud_bool == 0) |> 
  ggplot() +
  aes(x = income, y = (after_stat(count))/sum(after_stat(count)))+
  geom_bar(color = "grey70", fill = "#4A5899") +
  xlab(label = "Ingreso anual") +
  ylab(label = "Proporción") +
  scale_x_continuous(breaks = seq(0.1,0.9,0.1)) +
  scale_y_continuous(limits = c(0,0.6)) +
  ggtitle("No fraude")) /
(data |> 
   filter(fraud_bool == 1) |> 
   ggplot() +
   aes(x = income, y = (after_stat(count))/sum(after_stat(count)))+
   geom_bar(color = "grey70", fill = "#F2545B") +
   xlab(label = "Ingreso anual") +
   ylab(label = "Proporción") +
   scale_y_continuous(limits = c(0,0.6)) +
   scale_x_continuous(breaks = seq(0.1,0.9,0.1)) +
   ggtitle("Fraude"))) + plot_layout(axes = "collect", widths = c())
```

## Análisis descriptivo {.center}

```{r}

(data |> 
  filter(fraud_bool == 0) |> 
  ggplot() +
  aes(x = proposed_credit_limit_cat, y = after_stat(count)/sum(after_stat(count)))+
  geom_bar(color = "grey70", fill = "#4A5899") +
  xlab(label = "Crédito límite propuesto") +
  ylab(label = "Proporción") +
  scale_y_continuous(limits = c(0,0.85))+
  ggtitle("No fraude")+
   geom_text(aes(label = after_stat(count), 
                y = after_stat(count)/sum(after_stat(count)) + 0.02), 
            stat = "count", 
            size = 5,
            vjust = 0,
            color = "grey70")) +
(data |> 
  filter(fraud_bool == 1) |> 
  ggplot() +
  aes(x = proposed_credit_limit_cat, y = after_stat(count)/sum(after_stat(count)))+
  geom_bar(color = "grey70", fill = "#F2545B") +
  xlab(label = "Crédito límite propuesto") +
  ylab(label = "Proporción") +
  scale_y_continuous(limits = c(0,0.85))+
  ggtitle("Fraude")+
   geom_text(aes(label = after_stat(count), 
                y = after_stat(count)/sum(after_stat(count)) + 0.02), 
            stat = "count", 
            size = 5,
            vjust = 0,
            color = "grey70")) + plot_layout(axes = "collect") + # desde acá
  (data |> 
  filter(fraud_bool == 0) |> 
  ggplot() +
  aes(x = payment_type, y = (after_stat(count))/sum(after_stat(count)))+
  geom_bar(color = "grey70", fill = "#4A5899") +
  xlab(label = "Tipo del plan de pago") +
  ylab(label = "Proporción") +
  scale_y_continuous(limits = c(0,0.7)) +
  ggtitle("No fraude")+
   geom_text(aes(label = after_stat(count), 
                y = after_stat(count)/sum(after_stat(count)) + 0.02), 
            stat = "count", 
            size = 5,
            vjust = 0,
            color = "grey70")) +
(data |> 
  filter(fraud_bool == 1) |> 
  ggplot() +
  aes(x = payment_type, y = (after_stat(count))/sum(after_stat(count)))+
  geom_bar(color = "grey70", fill = "#F2545B") +
  xlab(label = "Tipo del plan de pago") +
  ylab(label = "Proporción") +
  scale_y_continuous(limits = c(0,0.7)) +
  ggtitle("Fraude")+
   geom_text(aes(label = after_stat(count), 
                y = after_stat(count)/sum(after_stat(count)) + 0.02), 
            stat = "count", 
            size = 5,
            vjust = 0,
            color = "grey70")) + plot_layout(axes = "collect")
#   (data |> 
#     filter(fraud_bool == 0) |> 
#     ggplot() +
#     aes(x = credit_risk_score, y = after_stat(count)/sum(after_stat(count)))+
#     geom_histogram(fill = "#4A5899", color = "black", bins = 20)+
#     scale_y_continuous(limits = c(0, 0.2)) +
#     xlab(label = "Score de riesgo crediticio") +
#     ylab(label = "Densidad") +
#     ggtitle("No fraude")) +
# (data |> 
#     filter(fraud_bool == 1) |> 
#     ggplot() +
#     aes(x = credit_risk_score, y = after_stat(count)/sum(after_stat(count)))+
#     geom_histogram(fill = "#F2545B", color = "black", bins = 20)+
#     scale_y_continuous(limits = c(0, 0.2)) +
#     xlab(label = "Score de riesgo crediticio") +
#     ylab(label = "Densidad") +
#     ggtitle("Fraude")) + plot_layout(axes = "collect")
```

## Análisis descriptivo {.center}

```{r}

(data |> 
   group_by(fraud_bool, has_other_cards) |> 
   summarise(prop = n()) |> 
   mutate(prop = prop/sum(prop)) |> 
  ggplot() +
  aes(x = has_other_cards, y = prop, fill = fraud_bool, group = fraud_bool)+
  geom_bar(color = "grey70", position = "dodge", stat = "identity") +
  xlab(label = "Tenencia de otras tarjetas") +
  ylab(label = "Proporción") +
  labs(fill = "Fraude") +
  scale_fill_manual(values = c("#4A5899","#F2545B"),labels = c("No","Si")) +
  scale_x_discrete(labels = c("0" = "No","1" = "Si")) +
  scale_y_continuous(limits = c(0,1))) +
  (data |> 
   group_by(fraud_bool, device_distinct_emails_8w) |> 
   summarise(prop = n()) |> 
   mutate(prop = prop/sum(prop)) |> 
  ggplot() +
  aes(x = device_distinct_emails_8w, y = prop, fill = fraud_bool, group = fraud_bool)+
  geom_bar(color = "grey70", position = "dodge", stat = "identity") +
  xlab(label = "Número de emails distintos en la página\ndel banco en las últimas 8 semanas") +
  ylab(label = "Proporción") +
  labs(fill = "Fraude") +
  scale_fill_manual(values = c("#4A5899","#F2545B"),labels = c("No","Si")) +
  scale_x_continuous(breaks = c(1,2)) +
  scale_y_continuous(limits = c(0,1)))
```


## Análisis descriptivo {.center}


```{r}
(data |> 
   group_by(fraud_bool, email_is_free) |> 
   summarise(prop = n()) |> 
   mutate(prop = prop/sum(prop)) |> 
  ggplot() +
  aes(x = email_is_free, y = prop, fill = fraud_bool, group = fraud_bool)+
  geom_bar(color = "grey70", position = "dodge", stat = "identity") +
  xlab(label = "Dominio del email") +
  ylab(label = "Proporción") +
  labs(fill = "Fraude") +
  scale_fill_manual(values = c("0" = "#4A5899", "1" = "#F2545B"),labels = c("No","Si")) +
  scale_x_discrete(labels = c("0" = "Pago","1" = "Gratuito")) +
  scale_y_continuous(limits = c(0,1))) +
  (data |> 
   group_by(fraud_bool, keep_alive_session) |> 
   summarise(prop = n()) |> 
   mutate(prop = prop/sum(prop)) |> 
  ggplot() +
  aes(x = keep_alive_session, y = prop, fill = fraud_bool, group = fraud_bool)+
  geom_bar(color = "grey70", position = "dodge", stat = "identity") +
  xlab(label = "Mantener sesión abierta") +
  ylab(label = "Proporción") +
  labs(fill = "Fraude") +
  scale_fill_manual(values = c("0" = "#4A5899", "1" = "#F2545B"),labels = c("No","Si")) +
  scale_x_discrete(labels = c("0" = "No","1" = "Si")) +
  scale_y_continuous(limits = c(0,1)))
```

## Análisis descriptivo {.center}

```{r}
(data |> 
  filter(fraud_bool == 0) |> 
  ggplot() +
  aes(x = device_os, y = after_stat(count)/sum(after_stat(count)))+
  geom_bar(color = "grey70", fill = "#4A5899") +
  xlab(label = "Sistema operativo del dispositivo utilizado") +
  ylab(label = "Proporción") +
  geom_text(aes(label = after_stat(count), 
                y = after_stat(count)/sum(after_stat(count)) + 0.02), 
            stat = "count", 
            size = 5,
            vjust = 0,
            color = "grey70") +
  scale_y_continuous(limits = c(0,0.65))+
  ggtitle("No fraude")) +
(data |> 
  filter(fraud_bool == 1) |> 
  ggplot() +
  aes(x = device_os, y = after_stat(count)/sum(after_stat(count)))+
  geom_bar(color = "grey70", fill = "#F2545B") +
  xlab(label = "Sistema operativo del dispositivo utilizado") +
  ylab(label = "Proporción") +
  scale_y_continuous(limits = c(0,0.65))+
  ggtitle("Fraude") +
   geom_text(aes(label = after_stat(count), 
                y = after_stat(count)/sum(after_stat(count)) + 0.02), 
            stat = "count", 
            size = 5,
            vjust = 0,
            color = "grey70")) + plot_layout(axes = "collect") +
  (data |> 
  filter(fraud_bool == 0) |> 
  ggplot() +
  aes(x = housing_status, y = after_stat(count)/sum(after_stat(count)))+
  geom_bar(color = "grey70", fill = "#4A5899") +
  xlab(label = "Estado residencial del cliente") +
  ylab(label = "Proporción") +
  geom_text(aes(label = after_stat(count), 
                y = after_stat(count)/sum(after_stat(count)) + 0.02), 
            stat = "count", 
            size = 5,
            vjust = 0,
            color = "grey70") +
  scale_y_continuous(limits = c(0,0.65))+
  ggtitle("No fraude")) +
(data |> 
  filter(fraud_bool == 1) |> 
  ggplot() +
  aes(x = housing_status, y = after_stat(count)/sum(after_stat(count)))+
  geom_bar(color = "grey70", fill = "#F2545B") +
  xlab(label = "Estado residencial del cliente") +
  ylab(label = "Proporción") +
  scale_y_continuous(limits = c(0,0.65))+
  ggtitle("Fraude") +
   geom_text(aes(label = after_stat(count), 
                y = after_stat(count)/sum(after_stat(count)) + 0.02), 
            stat = "count", 
            size = 5,
            vjust = 0,
            color = "grey70")) + plot_layout(axes = "collect")
```


## Modelo seleccionado

$$
logit(\pi_i) = \beta_0 + \overbrace{\beta_I\cdot I_i}^{\text{Ingreso}} + \overbrace{\beta_{H1}\cdot H_{1i} + \beta_{H2}\cdot H_{2i} + \beta_{H3}\cdot H_{3i}}^{\text{Estado residencial}} + \\ +\overbrace{\beta_{Ph}\cdot Ph_i}^{\text{Validez tel. fijo}} + \overbrace{\beta_{Pm}\cdot Pm_i}^{\text{Validez celular}} + \overbrace{\beta_C\cdot C_i}^{\text{Otras tarjetas}} + \overbrace{\beta_L\cdot L_i}^{\text{Lim. crediticio}} + \\ + \overbrace{\beta_{D1}\cdot D_{1i} + \beta_{D2}\cdot D_{2i} + \beta_{D3}\cdot D_{3i}}^{\text{Sistitema operativo del dispositivo}} + \overbrace{\beta_E\cdot E_i}^{\text{Nº e-mails}}
$$

## Comprobación del enlace y bondad del ajuste {.bigger}


```{r}
data <- data |> 
  mutate(
    housing_status = case_when(housing_status %in% c("BD", "BE", "BF") ~ "Otro",
                               T ~ housing_status),
    
    device_os = case_when(device_os == "x11" ~ "other",
                          T ~ device_os),
    customer_age = factor(case_when(customer_age %in% c(10,20) ~ "<20",
                             customer_age %in% c(60,70) ~ ">60",
                             T ~ as.character(customer_age)))
  )

modelo_logit <- glm(fraud_bool ~ income + housing_status + 
    phone_home_valid + phone_mobile_valid + has_other_cards + 
    proposed_credit_limit + device_os + device_distinct_emails_8w, 
    data = data, 
    family = binomial(link = "logit"), 
    na.action = na.omit)

data_enlaces <- data

# Comprobacion enlace logit --------------------
pred.logit<-predict(modelo_logit)
data_enlaces$pred.2.logit <- pred.logit*pred.logit

modelo_logit.2 <- glm(fraud_bool ~ income + housing_status + 
    phone_home_valid + phone_mobile_valid + has_other_cards + 
    proposed_credit_limit + device_os + device_distinct_emails_8w + pred.2.logit,
    data = data_enlaces,
    family = binomial(link = "logit"),
    na.action = na.omit)


# anova(modelo_logit, modelo_logit.2, test="LRT") 
# Este enlace es apropiado

# Comprobacion enlace probit --------------------
modelo_probit <- glm(fraud_bool ~ income + housing_status + 
    phone_home_valid + phone_mobile_valid + has_other_cards + 
    proposed_credit_limit + device_os + device_distinct_emails_8w, data = data, family = binomial(link = "probit"), na.action = na.omit)

pred.probit <- predict(modelo_probit)
data_enlaces$pred.2.probit <- pred.probit*pred.probit

modelo_probit.2 <- glm(fraud_bool ~ income + housing_status + 
    phone_home_valid + phone_mobile_valid + has_other_cards + 
    proposed_credit_limit + device_os + device_distinct_emails_8w + pred.2.probit,
    data = data_enlaces,
    family = binomial(link = "probit"),
    na.action = na.omit)

# anova(modelo_probit, modelo_probit.2, test="LRT") 
# Este enlace es apropiado


# Comprobacion enlace cloglog --------------------
modelo_cloglog <- glm(fraud_bool ~ income + housing_status + 
    phone_home_valid + phone_mobile_valid + has_other_cards + 
    proposed_credit_limit + device_os + device_distinct_emails_8w, data = data, family = binomial(link = "cloglog"), na.action = na.omit)

pred.cloglog <- predict(modelo_cloglog)
data_enlaces$pred.2.cloglog <- pred.cloglog*pred.cloglog

modelo_cloglog.2 <- glm(fraud_bool ~ income + housing_status + 
    phone_home_valid + phone_mobile_valid + has_other_cards + 
    proposed_credit_limit + device_os + device_distinct_emails_8w + pred.2.cloglog,
    data = data_enlaces,
    family = binomial(link = "cloglog"),
    na.action = na.omit)

# anova(modelo_cloglog, modelo_cloglog.2, test="LRT") 
# Este enlace es apropiado


hltest(modelo_logit, verbose = F)
```

```{r tabla test enlace}
data.frame(
  Enalce = c("Logístico", "Probit", "Cloglog"),
  est_rv = c(0.3378, 1.2196, 0.0646),
  gl_rv = c(1, 1, 1),
  p_value_rv = c(0.5611, 0.2694, 0.7994),
  est_hl = c(2.7347, 4.6065, 3.3802),
  gl_hl = c(8, 8, 8),
  p_value_hl = c(0.9499, 0.7987, 0.9083)
) |> 
  `colnames<-`(c("Enlace", "Est. RV", "GL RV", "Valor-p RV", "Est. HL", "GL HL", "Valor-p HL")) |>
  kable() |> 
  kable_styling() |> 
  row_spec(0, background = "black", color = "grey90", bold = T) |> 
  row_spec(1:3, background = "#191919", color = "grey90", hline_after = T) |> 
  column_spec(1, background = "#191919") |> 
  row_spec(1, background = "#95373C", color = "grey90", hline_after = T)
```


<!-- <style type="text/css"> -->
<!-- .tg  {border-collapse:collapse;border-spacing:0;} -->
<!-- .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; -->
<!--   overflow:hidden;padding:10px 5px;word-break:normal;} -->
<!-- .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; -->
<!--   font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;} -->
<!-- .tg .tg-x3s1{border-color:inherit;font-size:xx-large;text-align:center;vertical-align:top} -->
<!-- </style> -->
<!-- <table class="tg"><thead> -->
<!--   <tr> -->
<!--     <th class="tg-x3s1">Enlace</th> -->
<!--     <th class="tg-x3s1">Estadistica<br>test RV</th> -->
<!--     <th class="tg-x3s1">Grados de libertad<br>test RV</th> -->
<!--     <th class="tg-x3s1">Valor p<br>test RV</th> -->
<!--     <th class="tg-x3s1">Estadistica<br>test H-L</th> -->
<!--     <th class="tg-x3s1">Grados de libertad<br>test H-L</th> -->
<!--     <th class="tg-x3s1">Valor p <br>test H-L</th> -->
<!--   </tr></thead> -->
<!-- <tbody> -->
<!--   <tr> -->
<!--     <td class="tg-x3s1">Logístico</td> -->
<!--     <td class="tg-x3s1">0.8010</td> -->
<!--     <td class="tg-x3s1">1</td> -->
<!--     <td class="tg-x3s1">0.3708</td> -->
<!--     <td class="tg-x3s1">2.7342</td> -->
<!--     <td class="tg-x3s1">8</td> -->
<!--     <td class="tg-x3s1">0.9499</td> -->
<!--   </tr> -->
<!--   <tr> -->
<!--     <td class="tg-x3s1">Probit</td> -->
<!--     <td class="tg-x3s1">1.9706</td> -->
<!--     <td class="tg-x3s1">1</td> -->
<!--     <td class="tg-x3s1">0.1604</td> -->
<!--     <td class="tg-x3s1">5.7644</td> -->
<!--     <td class="tg-x3s1">8</td> -->
<!--     <td class="tg-x3s1">0.6736</td> -->
<!--   </tr> -->
<!--   <tr> -->
<!--     <td class="tg-x3s1">Cloglog</td> -->
<!--     <td class="tg-x3s1">0.0015</td> -->
<!--     <td class="tg-x3s1">1</td> -->
<!--     <td class="tg-x3s1">0.9682</td> -->
<!--     <td class="tg-x3s1">2.6860</td> -->
<!--     <td class="tg-x3s1">8</td> -->
<!--     <td class="tg-x3s1">0.9525</td> -->
<!--   </tr> -->
<!-- </tbody></table> -->


## Análisis de residuos {.center}

### Evaluación de la componente sistemática {.center}

```{r}
# Residuos cuantil
rQ.logit <- qresid(modelo_logit)

### Gráfico de residuos cuantil vs. probabilidades estimadas (ajuste logit)
G1 <- ggplot(data_enlaces, aes(y = rQ.logit, x = fitted(modelo_logit))) + 
  geom_point(fill = "#F2545B", shape = 21, size = 3, alpha = 0.4) +
  geom_hline(yintercept = 0) + 
  # ylim(-3, 3) + 
  geom_hline(yintercept = -3, linetype = "dashed") + 
  geom_hline(yintercept =  3, linetype = "dashed") +
  labs(x = expression(hat(pi)), y = "Residuos cuantil")

G1
```

## Análisis de residuos {.center}
### Comprobación de la distribución propuesta {.center}

```{r}

# Gráfico QQ
ggplot(data_enlaces, aes(sample = rQ.logit)) +
  stat_qq(distribution = qnorm, fill = "#F2545B", shape = 21, size = 3, alpha = 0.4) +
  stat_qq_line(color = "grey90") +
  annotate(geom = "label", label = paste("Test de Normalidad Shapiro-Wilks\n p-value:", round(shapiro.test(rQ.logit)$p.value, 2)), x = 0.9, y = -1.5, fill = "grey13", color = "grey90") +
  labs(x = "Cuantiles teóricos", y = "Cuantiles de los residuos cuantil")


```


## Interpretaciones

```{r RO modelo sin interacciones}
#| tbl-cap: "Razones de odds del modelo ajustado"
x <- summary(modelo_logit)

tabla_ro <- data.frame(
  RO = c(
    "Límite propuesto (100 unidades)",
    "Teléfono fijo (Válido vs No válido)",
    "Ingreso (en un decíl)",
    "Tenencia otra tarjeta (Si vs No)"
  ),
  Estimación = c(
                 exp(as.numeric(modelo_logit$coefficients["proposed_credit_limit"])*100),
                 exp(as.numeric(modelo_logit$coefficients["phone_home_valid1"])),
                 exp(as.numeric(modelo_logit$coefficients["income"])*0.1),
                 exp(as.numeric(modelo_logit$coefficients["has_other_cards1"]))
                 ),
  LI = c(
    exp(as.numeric(modelo_logit$coefficients["proposed_credit_limit"])*100 - 1.96 * 100 * x$coefficients["proposed_credit_limit",2]),
    exp(as.numeric(modelo_logit$coefficients["phone_home_valid1"]) - 1.96 * x$coefficients["phone_home_valid1",2]),
    exp(as.numeric(modelo_logit$coefficients["income"])*0.1 - 1.96 * 0.1 * x$coefficients["income",2]),
    exp(as.numeric(modelo_logit$coefficients["has_other_cards1"]) - 1.96 * x$coefficients["has_other_cards1",2])
    ),
  LS = c(
    exp(as.numeric(modelo_logit$coefficients["proposed_credit_limit"])*100 + 1.96 * 100 * x$coefficients["proposed_credit_limit",2]),
    exp(as.numeric(modelo_logit$coefficients["phone_home_valid1"]) + 1.96 * x$coefficients["phone_home_valid1",2]),
    exp(as.numeric(modelo_logit$coefficients["income"])*0.1 + 1.96 * 0.1 * x$coefficients["income",2]),
    exp(as.numeric(modelo_logit$coefficients["has_other_cards1"]) + 1.96 * x$coefficients["has_other_cards1",2])
    )
  
)

kable(tabla_ro, digits = 4) |> 
  kable_styling() |> 
  row_spec(0, background = "black", color = "grey90") |> 
  column_spec(1, background = "#191919") |> 
  row_spec(1:4, background = "#191919", color = "grey90", font_size = 30, extra_css = "border-bottom-style: none")
  
```

## Perfiles destacados

![](Imgs/fraude.png)

## Evaluación de la capacidad predictiva {.center}

## Curva ROC

```{r}
curva_roc_knn <- roc(response = data$fraud_bool, predictor = fitted(modelo_logit), plot = F)

best_knn <- coords(curva_roc_knn, "local maximas")[7,]

data.frame(especificidad = curva_roc_knn$specificities,
           sensibilidad = curva_roc_knn$sensitivities,
           punto_corte = curva_roc_knn$thresholds
           ) |> 
  arrange(especificidad, sensibilidad) |> 
  ggplot() +
  geom_line(aes(x = especificidad, y = sensibilidad), color = "grey90") +
  scale_x_reverse() +
  geom_segment(x = -1, xend=0, y = 0, yend = 1, color = "grey90") +
  annotate(x = 0.8, y = 0.4, geom = "text", label = paste("AUC =", round(curva_roc_knn$auc, digits = 4)), color = "grey90") +
  geom_mark_ellipse(
    aes(x = best_knn$specificity, y = best_knn$sensitivity,
      label = format(round(as.numeric(best_knn$threshold), digits = 6), scientific = F),
      description = "Punto de corte"), 
    color = "red",
    label.fill = "grey15",
    label.colour= "grey90",
    con.colour= "grey90",
    expand = 0.01) + 
  labs(x = "Especificidad", y = "Sensibilidad")

```

## 

#### Matriz de confusión del modelo ajustado ante nuevos clientes

```{r capacidad predictiva modelo sin interaccion}
prob_pred <- exp(predict(modelo_logit, newdata = data_test))/(1+exp(predict(modelo_logit, newdata = data_test)))

fraud_pred <- factor(ifelse(prob_pred >= best_knn$threshold, 1, 0), levels = c(0,1))

# confusionMatrix(fraud_pred, reference = data_test$fraud_bool, positive = "1")

matriz_confucion <- confusionMatrix(fraud_pred, reference = data_test$fraud_bool, positive = "1")
```


```{r capacidad predictiva modelo sin interaccion 2}
data.frame(matriz_confucion$table) |> 
  mutate(Prediction = case_when(Prediction == 0 ~ "No fraude",
                                T ~ "Fraude"),
         Reference = case_when(Reference == 0 ~ "No fraude",
                                T ~ "Fraude")) |> 
  ggplot() +
  aes(x = Prediction, y = Reference, fill = Freq, label = Freq) +
  geom_tile(color = "black") +
  geom_label(color = "black", size = 5) +
  scale_fill_gradient(low = "#cfeac8", high = "#017A39") +
  labs(x = "Valor Predicho", y = "Valor Observado",
       caption = paste0("Precisión: ", round(matriz_confucion$overall[1], 2), "        |        ",
                        "Sensibilidad: ", round(matriz_confucion$byClass[1], 2), "        |        ",
                        "Especificidad: ", round(matriz_confucion$byClass[2], 2) 
                        )) +
  theme(legend.position = "none",
        plot.caption = element_text(hjust=0.5,size = 11))
```

## 

#### Matriz de confusión del modelo con interacciones ante nuevos clientes

```{r capacidad predictiva modelo con interaccion}
modelo_logit_3 <- glm(fraud_bool ~ income + housing_status + 
    phone_home_valid + phone_mobile_valid + has_other_cards + 
    proposed_credit_limit + device_os + device_distinct_emails_8w + income:phone_mobile_valid + has_other_cards:phone_mobile_valid, 
    data = data, 
    family = binomial(link = "logit"), 
    na.action = na.omit)

curva_roc_knn <- roc(response = data$fraud_bool, predictor = fitted(modelo_logit_3), plot = F)

best_knn <- coords(curva_roc_knn, "local maximas")[7,]

prob_pred <- exp(predict(modelo_logit_3, newdata = data_test))/(1+exp(predict(modelo_logit_3, newdata = data_test)))

fraud_pred <- factor(ifelse(prob_pred >= best_knn$threshold, 1, 0), levels = c(0,1))

matriz_confucion <- confusionMatrix(fraud_pred, reference = data_test$fraud_bool, positive = "1")
```


```{r capacidad predictiva modelo con interaccion 2}
data.frame(matriz_confucion$table) |> 
  mutate(Prediction = case_when(Prediction == 0 ~ "No fraude",
                                T ~ "Fraude"),
         Reference = case_when(Reference == 0 ~ "No fraude",
                                T ~ "Fraude")) |> 
  ggplot() +
  aes(x = Prediction, y = Reference, fill = Freq, label = Freq) +
  geom_tile(color = "black") +
  geom_label(color = "black", size = 5) +
  scale_fill_gradient(low = "#cfeac8", high = "#017A39") +
  labs(x = "Valor Predicho", y = "Valor Observado",
       caption = paste0("Precisión: ", round(matriz_confucion$overall[1], 2), "        |        ",
                        "Sensibilidad: ", round(matriz_confucion$byClass[1], 2), "        |        ",
                        "Especificidad: ", round(matriz_confucion$byClass[2], 2) 
                        )) +
  theme(legend.position = "none",
        plot.caption = element_text(hjust=0.5,size = 11))
```




## ¡¡¡Gracias por su atención!!! 😃😃😃 {.center}

